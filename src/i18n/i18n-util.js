// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
// @ts-check
/* eslint-disable */

/**
 * @typedef { import('typesafe-i18n').TranslateByString } TranslateByString,
 * @typedef { import('typesafe-i18n').LocaleTranslations<Locales, Translation> } LocaleTranslations,
 * @typedef { import('typesafe-i18n/detectors').LocaleDetector } LocaleDetector,
 * @typedef { import('./i18n-types').Locales } Locales,
 * @typedef { import('./i18n-types').Translation } Translation,
 * @typedef { import('./i18n-types').TranslationFunctions } TranslationFunctions
 */

import { i18nString as initI18nString, i18nObjectLoaderAsync } from 'typesafe-i18n'

import { detectLocale as detectLocaleFn } from 'typesafe-i18n/detectors'
import { initFormatters } from './formatters'

/** @type { Locales } */
export const baseLocale = 'en'

/** @type { Locales[] } */
export const locales = [
	'de',
	'en',
	'it'
]

/** @type { Record<Locales, () => Promise<any>> } */
const localeTranslationLoaders = {
	de: () => import('./de'),
	en: () => import('./en'),
	it: () => import('./it'),
}

/**
 * @param { Locales } locale
 * @return { Promise<Translation> }
 */
export const getTranslationForLocale = async (locale) => (await (localeTranslationLoaders[locale] || localeTranslationLoaders[baseLocale])()).default

/**
 * @param { Locales } locale
 * @return { Promise<TranslationFunctions> }
 */
export const i18nObject = (locale) => i18nObjectLoaderAsync(locale, getTranslationForLocale, initFormatters)

/**
 * @param { Locales } locale
 * @return { Promise<TranslateByString> }
 */
export const i18nString = async (locale) => initI18nString(locale, await initFormatters(locale))

/**
 * @param { LocaleDetector[] } detectors
 * @return { Locales }
 */
export const detectLocale = (...detectors) => detectLocaleFn(baseLocale, locales, ...detectors)
